# bash profile library for homebrew installed packages
# namespace: brew


# why not shadow brew directly?
# Because it will mess with some checks if "brew" is available or not.
function env::brew {
    # prevent multiple imports
    if which brew &>/dev/null; then return; fi

    eval "$(/opt/homebrew/bin/brew shellenv)"
    PS1="${PS1}[brew] "

    # Issue: When homebrew is loaded, the pyenv command becomes available
    #        and therefore it won't load the pyenv environment when I type
    #        `pyenv`. In this case you have to use env::pyenv. But this is
    #        intended behaviour.
}

#function brew::homebrew {
#    eval "$(/opt/homebrew/bin/brew shellenv)"
#}


function brew::bash-completion@2 {
    # brew info bash-completion@2
    [[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
}


function brew::coreutils {
    # brew info coreutils
    if [[ -d "/usr/local/opt/coreutils/libexec/gnubin" ]]; then
        export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    fi
}


function brew::gnu-sed {
    # brew info gnu-sed
    if [[ -d "/usr/local/opt/gnu-sed/libexec/gnubin" ]]; then
        export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
    fi
}


function brew::gnu-getopt {
    # brew info gnu-getopt
    if [[ -d "/usr/local/opt/gnu-getopt/bin" ]]; then
        export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
    fi
}


function brew::ncurses {
    # As MacOS comes with an old version of ncurses that can lead to various
    # issues. This commands adds the latest version of ncurses in front to
    # preinstalled version.
    # brew info ncurses
    export PATH="/usr/local/opt/ncurses/bin:$PATH"
}


function brew::fzf {
    # brew info fzf
    [[ -f ~/.fzf.bash ]] && source ~/.fzf.bash
}


function brew::itermocil-autocompletion {
    # brew info TomAnthony/brews/itermocil
    complete -W "$(itermocil --list)" itermocil
}






